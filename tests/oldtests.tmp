        # Test user5 for additional cases in rate limits controller
        {
            'name': 'testUser5',
            'status': 'allowed',
            'roles': ['financial_role'],
            'requests': {'requests_per_day': 30, 'requests_per_hour': 3, 'random_shift_minutes': 15}
        },
        # Test user6 for additional cases in rate limits controller
        {
            'name': 'testUser6',
            'status': 'allowed',
            'roles': ['financial_role'],
            'requests': {'requests_per_day': 10, 'requests_per_hour': 1, 'random_shift_minutes': 15}
        },
        # Test user6 for additional cases in rate limits controller
        {
            'name': 'testUser7',
            'status': 'allowed',
            'roles': ['financial_role'],
            'requests': {'requests_per_day': 10, 'requests_per_hour': 1, 'random_shift_minutes': 15}
        },
        # Test user8 for additional cases in rate limits controller
        {
            'name': 'testUser8',
            'status': 'allowed',
            'roles': ['financial_role'],
            'requests': {'requests_per_day': 10, 'requests_per_hour': 1, 'random_shift_minutes': 15}
        },
        # Test user9 for additional cases in rate limits controller
        {
            'name': 'testUser9',
            'status': 'allowed',
            'roles': ['financial_role'],
            'requests': {'requests_per_day': 10, 'requests_per_hour': 1, 'random_shift_minutes': 15}
        },
        # Test user10 for additional cases in rate limits controller
        {
            'name': 'testUser10',
            'status': 'allowed',
            'roles': ['financial_role'],
            'requests': {'requests_per_day': 10, 'requests_per_hour': 1, 'random_shift_minutes': 15}
        },
        # Test user11 for additional cases in rate limits controller (timer_watcher)
        {
            'name': 'testUser11',
            'status': 'allowed',
            'roles': ['financial_role'],
            'requests': {'requests_per_day': 10, 'requests_per_hour': 1, 'random_shift_minutes': 15}
        },
        # Test user12 for additional cases in rate limits controller (timer_watcher)
        {
            'name': 'testUser12',
            'status': 'allowed',
            'roles': ['financial_role'],
            'requests': {'requests_per_day': 30, 'requests_per_hour': 3, 'random_shift_minutes': 15}
        }
        
        
        
        
        
        
        # Test user4: EMPTY (because configuration is forbidden access)

        # Test user5: exist rate limit timestamp
        # - the request limit has been reset to zero
        # - restrictions on requests apply
        {
            'name': 'testUser5',
            'requests_history': [],
            'requests_ratelimits': {'end_time': f"{datetime.now() + timedelta(hours=1)}"}
        },

        # Test user6: EMPTY (because configuration is forbidden access)

        # Test user7: detect and setup rate limits timestamps (for requests_per_day)
        # - request limit exceeded
        # - restrictions on requests have not yet been applied
        {
            'name': 'testUser7',
            'requests_history': [str(datetime.now() - timedelta(hours=i)) for i in range(2, 13)],
            'requests_ratelimits': {'end_time': None}
        },
        # Test user8: detect and setup rate limits timestamps (for requests_per_hour)
        # - request limit exceeded
        # - restrictions on requests have not yet been applied
        {
            'name': 'testUser8',
            'requests_history': [
                str(datetime.now() - timedelta(minutes=10*i)) for i in range(1, 2)
            ] + [
                str(datetime.now() - timedelta(hours=i)) for i in range(2, 3)
            ],
            'requests_ratelimits': {'end_time': None}
        },
        # Test user9: detect and setup rate limits timestamps (for both: requests_per_day and requests_per_hour)
        # - request limit exceeded
        # - restrictions on requests have not yet been applied
        {
            'name': 'testUser9',
            'requests_history': [
                str(datetime.now() - timedelta(minutes=10*i)) for i in range(1, 2)
            ] + [
                str(datetime.now() - timedelta(hours=i)) for i in range(2, 13)
            ],
            'requests_ratelimits': {'end_time': None}
        },
        # Test user10: reset expired rate limit
        # - the counter is reset to zero
        # - the speed limit timer has expired
        {
            'name': 'testUser10',
            'requests_history': [],
            'requests_ratelimits': {'end_time': str(datetime.now() - timedelta(hours=1))}
        },
        # Test user11: reset expired rate limit
        # - the counter is reset to zero
        # - the speed limit timer has expired
        {
            'name': 'testUser11',
            'requests_history': [
                str(datetime.now() - timedelta(minutes=15*i)) for i in range(1, 5)
            ] + [
                str(datetime.now() - timedelta(hours=i)) for i in range(20, 26)
            ],
            'requests_ratelimits': {'end_time': None}
        },
        # Test user12: reset expired rate limit
        # - the counter is reset to zero
        # - the speed limit timer has expired
        {
            'name': 'testUser12',
            'requests_history': [
                str(datetime.now() - timedelta(minutes=10*i)) for i in range(1, 2)
            ] + [
                str(datetime.now() - timedelta(hours=i)) for i in range(22, 34)
            ],
            'requests_ratelimits': {'end_time': None}
        }